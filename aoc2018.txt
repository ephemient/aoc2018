-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/ephemient/aoc2018#readme</a>
@package aoc2018
@version 0.1.0.0


module Day1
day1a :: String -> Int

-- | Returns a repeat if found within a single cycle; otherwise, the
--   running sums are grouped by the | remainder modulus total sum, then
--   the first smallest inter-group gap (if any) is returned.
day1b :: String -> Maybe Int


module Day10
day10 :: String -> Maybe (Int, String)


module Day11
day11a :: String -> String
day11b :: String -> String


module Day12
day12 :: Int -> String -> Maybe Int


module Day13
day13a :: String -> String
day13b :: String -> String


module Day14
day14a :: String -> String
day14b :: String -> Int


module Day15
day15a :: String -> (Int, Int)
day15b :: String -> (Int, (Int, Int))
instance GHC.Classes.Eq Day15.Species


module Day16
day16a :: String -> Maybe Int
day16b :: String -> Maybe Int
instance GHC.Classes.Ord Day16.Op
instance GHC.Classes.Eq Day16.Op
instance GHC.Enum.Enum Day16.Op
instance GHC.Enum.Bounded Day16.Op


module Day17
day17a :: String -> Maybe Int
day17b :: String -> Maybe Int
instance GHC.Classes.Eq Day17.Element


module Day18
day18 :: Int -> String -> Int


module Day19
day19 :: Int -> String -> Maybe Int


module Day2
day2a :: String -> Int
day2b :: String -> Maybe String


module Day20
day20a :: String -> Int
day20b :: String -> Int


module Day21
day21a :: String -> Maybe Int
day21b :: String -> Maybe Int
instance GHC.Classes.Eq Day21.Op


module Day22
day22a :: String -> Maybe Int
day22b :: String -> Maybe Int


module Day23
day23a :: String -> Maybe Int
day23b :: String -> Maybe Int
instance GHC.Classes.Eq a => GHC.Classes.Eq (Day23.Octa a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Day23.Quad a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Day23.Quad a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Day23.Octa a)


module Day24
day24a :: String -> Maybe Int
day24b :: String -> Maybe Int
instance (GHC.Classes.Ord s, GHC.Classes.Ord a) => GHC.Classes.Ord (Day24.Key s a)
instance (GHC.Classes.Eq s, GHC.Classes.Eq a) => GHC.Classes.Eq (Day24.Key s a)


module Day25
day25a :: String -> Int


module Day3
day3a :: String -> Maybe Int
day3b :: String -> Maybe Int
instance GHC.Classes.Ord dim => GHC.Base.Semigroup (Day3.Area dim)


module Day4
day4a :: String -> Maybe Int
day4b :: String -> Maybe Int
instance GHC.Classes.Ord id => GHC.Classes.Ord (Day4.Event id)
instance GHC.Classes.Eq id => GHC.Classes.Eq (Day4.Event id)


module Day5
day5a :: String -> Int
day5b :: String -> Int


module Day6
day6a :: String -> Maybe Int
day6b :: Int -> String -> Maybe Int


module Day7
day7a :: String -> String
day7b :: Int -> Int -> String -> Int


module Day8
day8a :: String -> Maybe Int
day8b :: String -> Maybe Int


module Day9
day9a :: String -> Maybe Int
day9b :: String -> Maybe Int
play :: Int -> Int -> Int
