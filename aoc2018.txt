-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/ephemient/aoc2018#readme</a>
@package aoc2018
@version 0.1.0.0


module Day1
day1a :: String -> Int

-- | Returns a repeat if found within a single cycle; otherwise, the
--   running sums are grouped by the | remainder modulus total sum, then
--   the first smallest inter-group gap (if any) is returned.
day1b :: String -> Maybe Int


module Day2
day2a :: String -> Int
day2b :: String -> Maybe String


module Day3
day3a :: String -> Maybe Int
day3b :: String -> Maybe Int
instance GHC.Classes.Ord dim => GHC.Base.Semigroup (Day3.Area dim)


module Day4
day4a :: String -> Int
day4b :: String -> Int
instance GHC.Classes.Ord id => GHC.Classes.Ord (Day4.Event id)
instance GHC.Classes.Eq id => GHC.Classes.Eq (Day4.Event id)


module Day5
day5a :: String -> Int
day5b :: String -> Int


module Day6
day6a :: String -> Int
day6b :: Int -> String -> Int
